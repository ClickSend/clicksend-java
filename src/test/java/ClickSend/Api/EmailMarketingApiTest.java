/*
 * ClickSend v3 API
 *  This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 
 *
 * OpenAPI spec version: 3.1
 * Contact: support@clicksend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ClickSend.Api;

import ClickSend.ApiException;
import ClickSend.Model.EmailAddress;
import ClickSend.Model.EmailCampaign;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmailMarketingApi
 */
@Ignore
public class EmailMarketingApiTest {

    private final EmailMarketingApi api = new EmailMarketingApi();

    
    /**
     * Get all email addresses
     *
     * Get all email addresses
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allowedEmailAddressGetTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String response = api.allowedEmailAddressGet(page, limit);

        // TODO: test validations
    }
    
    /**
     * Create allowed Email Address
     *
     * Create allowed Email Address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allowedEmailAddressPostTest() throws ApiException {
        EmailAddress emailAddress = null;
        String response = api.allowedEmailAddressPost(emailAddress);

        // TODO: test validations
    }
    
    /**
     * Cancel email campaign
     *
     * Cancel email campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelEmailCampaignPutTest() throws ApiException {
        Integer emailCampaignId = null;
        String response = api.cancelEmailCampaignPut(emailCampaignId);

        // TODO: test validations
    }
    
    /**
     * Get specific email campaign
     *
     * Get specific email campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailCampaignGetTest() throws ApiException {
        Integer emailCampaignId = null;
        String response = api.emailCampaignGet(emailCampaignId);

        // TODO: test validations
    }
    
    /**
     * Export specific email campaign history
     *
     * Export specific email campaign history
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailCampaignHistoryExportGetTest() throws ApiException {
        Integer emailCampaignId = null;
        Integer dateFrom = null;
        Integer dateTo = null;
        String response = api.emailCampaignHistoryExportGet(emailCampaignId, dateFrom, dateTo);

        // TODO: test validations
    }
    
    /**
     * Get specific email campaign history
     *
     * Get specific email campaign history
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailCampaignHistoryGetTest() throws ApiException {
        Integer emailCampaignId = null;
        Integer dateFrom = null;
        Integer dateTo = null;
        Integer page = null;
        Integer limit = null;
        String response = api.emailCampaignHistoryGet(emailCampaignId, dateFrom, dateTo, page, limit);

        // TODO: test validations
    }
    
    /**
     * Send email campaign
     *
     * Send email campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailCampaignPostTest() throws ApiException {
        EmailCampaign emailCampaign = null;
        String response = api.emailCampaignPost(emailCampaign);

        // TODO: test validations
    }
    
    /**
     * Calculate email campaign price
     *
     * Calculate email campaign price
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailCampaignPricePostTest() throws ApiException {
        EmailCampaign emailCampaign = null;
        String response = api.emailCampaignPricePost(emailCampaign);

        // TODO: test validations
    }
    
    /**
     * Edit email campaign
     *
     * Edit email campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailCampaignPutTest() throws ApiException {
        Integer emailCampaignId = null;
        EmailCampaign emailCampaign = null;
        String response = api.emailCampaignPut(emailCampaignId, emailCampaign);

        // TODO: test validations
    }
    
    /**
     * Get all email campaigns
     *
     * Get all email campaigns
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailCampaignsGetTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String response = api.emailCampaignsGet(page, limit);

        // TODO: test validations
    }
    
    /**
     * Send verification token
     *
     * Send verification token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendVerificationTokenGetTest() throws ApiException {
        Integer emailAddressId = null;
        String response = api.sendVerificationTokenGet(emailAddressId);

        // TODO: test validations
    }
    
    /**
     * Delete specific email address
     *
     * Delete specific email address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void specificAllowedEmailAddressDeleteTest() throws ApiException {
        Integer emailAddressId = null;
        String response = api.specificAllowedEmailAddressDelete(emailAddressId);

        // TODO: test validations
    }
    
    /**
     * Get specific email address
     *
     * Get specific email address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void specificAllowedEmailAddressGetTest() throws ApiException {
        Integer emailAddressId = null;
        String response = api.specificAllowedEmailAddressGet(emailAddressId);

        // TODO: test validations
    }
    
    /**
     * Verify email address using verification token
     *
     * Verify email address using verification token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyAllowedEmailAddressGetTest() throws ApiException {
        Integer emailAddressId = null;
        String activationToken = null;
        String response = api.verifyAllowedEmailAddressGet(emailAddressId, activationToken);

        // TODO: test validations
    }
    
}
